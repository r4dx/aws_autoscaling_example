// Copied and modified from https://github.com/springfox/springfox/blob/fb780ee1f14627b239fba95730a69900b9b2313a/gradle/coverage.gradle

apply plugin: 'jacoco'

ext {
    limits = [
            'line': 75,
    ]
}

jacocoTestReport {
    reports {
        //XML required by coveralls and for the below coverage checks
        xml.enabled true
    }

    doLast {
        def report = file("${jacoco.reportsDir}/test/jacocoTestReport.xml")
        logger.lifecycle("Checking coverage results: ${report}")

        def parser = new XmlParser()
        parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
        parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
        def results = parser.parse(report)

        def percentage = {
            if (it == null) {
                logger.info("")
            }
            def covered = it.'@covered' as Double
            def missed = it.'@missed' as Double
            ((covered / (covered + missed)) * 100).round(2)
        }

        def counters = results.counter
        def metrics = [:]
        metrics << [
                'line'       : percentage(counters.find { it.'@type'.equals('LINE') }),
        ]


        def failures = []
        metrics.each {
            def limit = limits[it.key]
            if (it.value < limit) {
                failures.add("- ${it.key} coverage rate is: ${it.value}%, minimum is ${limit}%")
            }
        }

        if (failures) {
            logger.info("------------------ Code Coverage Failed -----------------------")
            failures.each {
                logger.info(it)
            }
            logger.info("---------------------------------------------------------------")
            throw new GradleException("Code coverage failed")
        } else{
            logger.info("Passed Code Coverage Checks")
        }
    }
}
jacocoTestReport.dependsOn test